"""Undo demonstration, using a List as a stack
Every Command is added to the array.
Undo pops the last command from the stack
and also resets the x position of the line x coord"""

import tkinter as tk
from tkinter import *
from tkinter import *

# Command object interface
class Command():
    def execute(self):pass
    def undo(self):pass

# stack of commands generated by the Red and Blue buttons
class CommandStack():
    def __init__(self, canvas):
        self.commands = []  # stack of commands kept here
        self.canvas = canvas
    # add line and draw it
    def addDraw(self, command):
        self.commands.append(command)
        command.execute()   # draw the line

    #redraw all the lines
    def redraw(self):
        self.canvas.delete('all')   # remove all lines
        for comd in self.commands:  # and redraw all remaining
            comd.execute()

    #pops last command off the stack
    # and returns command to call its Undo
    def undo(self):
        comd=None
        if len(self.commands) > 0:
            comd = self.commands.pop()
            self.redraw()
        return comd

# Button command, base class for Red and Blue buttons
class ButtonCommand(Command):
    def __init__(self, button, x1, y1, x2, y2, color):
        self.canvas = button.getCanvas()
        self.button = button
        self.x1, self.x2 = x1, x2
        self.y1, self.y2 = y1, y2
        self.color = color
    def execute(self):
        self.canvas.create_line(self.x1,
                self.y1,self.x2,self.y2, fill=self.color)
    def undo(self):
        self.button.undo()

# abstract button class with Command interface
class DButton(Button, Command):
    def __init__(self, master,  **kwargs):
        super().__init__(master,
            command=self.execute, **kwargs)
    def execute(self): pass

# draws red diagnal line and advances x coord
class RedButton(DButton):
    def __init__(self, root, canvas:Canvas,stack:CommandStack):
        super().__init__(root, text="Red")
        self.root = root
        self.canvas=canvas
        self.stack = stack
        self.x = self.y = 0
    # create a button command an the stack and draw it
    def execute(self):
        bcomd = ButtonCommand(self,
                self.x,self.y,
                self.x+20,self.y+150,'red')
        self.x += 20            # move red to right
        self.stack.addDraw(bcomd) #push it and draw it

    #returns canvas
    def getCanvas(self):
        return self.canvas

    # resets x coord back one line
    def undo(self):
        self.x -= 20

# draws blue lines starting from right
class BlueButton(DButton):
    def __init__(self, root, canvas:Canvas, stack:CommandStack):
        super().__init__(root, text="Blue")
        self.root = root
        self.canvas = canvas
        self.stack = stack
        self.x=250
        self.y=0
    # creates Button command and adds it to the stack
    def execute(self):
        bcomd = ButtonCommand(self,
                self.x, self.y, self.x - 20,
                self.y + 150, 'blue')
        self.x -= 20   # move blue to left
        self.stack.addDraw(bcomd)
    def revert(self):
        self.x += 20
    def getCanvas(self):
        return self.canvas

    def undo(self):
        self.x += 20

# Undo button pops cone command off the stack
# and calls its Undo
class UndoButton(DButton):
    def __init__(self, root, stack:CommandStack):
        super().__init__(root, text="Undo")
        self.root = root
        self.stack = stack
    def execute(self):
        comd = self.stack.undo()    #remove last command
        if comd != None:
            comd.undo()     # undo x coordinate

# Builds UI
class Builder():
    def build(self):
        root = Tk()
        root.title("Command demo")
        canvas = Canvas(root, width=250, height=150, bg="#dddddd")
        canvas.grid(row=0, column=0, columnspan=3)
        stack = CommandStack(canvas) # create a stack

        # create the buttons
        redbutton = RedButton(root, canvas, stack)
        redbutton.grid(row=1,column=0, pady=10,padx=5, sticky=EW)

        undobutton = UndoButton(root, stack)
        undobutton.grid(row=1,column=1, pady=10,padx=5,sticky=EW)

        bluebutton = BlueButton(root, canvas, stack)
        bluebutton.grid(row=1, column=2, pady=10,padx=5, sticky=EW)

        mainloop()
#----------------------------
def main():
    Builder().build()

###  Here we go  ####
if __name__ == "__main__":
    main()